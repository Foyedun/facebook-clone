package dev.facebook.week6.dao.impl;

import dev.facebook.week6.dao.UserDao;
import dev.facebook.week6.dto.UserDto;
import dev.facebook.week6.enums.Gender;
import dev.facebook.week6.models.User;
import dev.facebook.week6.util.DatabaseConnection;
import lombok.NonNull;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class UserDaoImpl implements UserDao {
    @Override
    public User signUp(UserDto userDto) {
        final String userInsertSql = "insert into user (FirstName, Lastname, DateOfBirth, Age, Password, Email) " + "values (?,?,?,?,?,?)";

        User savedUser = null;

        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection()) {

            PreparedStatement statement = connection.prepareStatement(userInsertSql, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, userDto.getFirstName());
            statement.setString(2, userDto.getLastName());
            statement.setString(3, userDto.getDateOfBirth());
            statement.setInt(4, 23);
            statement.setString(5, userDto.getPassword());
            statement.setString(6, userDto.getEmail());

            int result = statement.executeUpdate();

            final ResultSet keysResultSet = statement.getGeneratedKeys();

            keysResultSet.next();

            final int autogeneratedId = keysResultSet.getInt(1);

            savedUser = result == 1 ? new User(autogeneratedId, userDto.getFirstName(), userDto.getLastName(),
                    userDto.getDateOfBirth(), userDto.getAge(), userDto.getPassword(), userDto.getEmail()) : null;

            System.out.println("Result: " + result);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return savedUser;
    }

    @Override
    public boolean isUserExist(String email, String password) {
        final String SELECT_USER_BY_EMAIL_PASSWORD = "select * from user where email = ? and password = ? ";

        boolean status = false;

        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection();) {
            PreparedStatement statement = connection.prepareStatement(SELECT_USER_BY_EMAIL_PASSWORD);

            statement.setString(1, email);
            statement.setString(2, password);

            ResultSet resultSet = statement.executeQuery();
            status = resultSet.next();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return status;
    }

    public Optional<User> getCustomerById(int userId) {
        return Optional.empty();
    }

}